openapi: 3.0.1
info:
  title: Piana Tech Web Console
  description: This is a swagger config for Piana Tech Web Console
  version: 0.1.0
servers:
  - url: http://localhost:8080/
paths:
  /sample:
    get:
      tags:
        - sample
      summary: return a sample related to given id
      operationId: getSample
      parameters:
        - name: user-id
          in: header
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SampleDto'
        500:
          description: Error occurred during execution of request.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /sample/one:
    get:
      tags:
        - sample
      summary: return a sample related to given id
      operationId: getSampleOne
      responses:
        200:
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SampleDto'
        500:
          description: Error occurred during execution of request.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-authentication/signup:
    post:
      tags:
        - guest-authentication
      summary: signup by mobile
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRequiredDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-authentication/login:
    post:
      tags:
        - guest-authentication
      summary: login by mobile
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-authentication/forget-password:
    post:
      tags:
        - guest-authentication
      summary: remember password by mobile
      operationId: forgetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPasswordDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRequiredDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-authentication/verify-token:
    post:
      tags:
        - guest-authentication
      summary: verify mobile number
      operationId: verifyToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-authentication/how-me:
    get:
      tags:
        - user-authentication
      summary: return me if session authenticated
      operationId: howMe
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-authentication/logout:
    post:
      tags:
        - user-authentication
      summary: logout by mobile
      operationId: logout
      responses:
        200:
          description: Successful operation.
          content: {}
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/member/groups:
    get:
      tags:
        - user-group
      summary: get user member groups
      operationId: getMemberGroups
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/own/groups:
    get:
      tags:
        - user-group
      summary: get group
      operationId: getOwnGroups
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    post:
      tags:
        - user-group
      summary: create a group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      tags:
        - user-group
      summary: update a group
      operationId: updateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/own/group/image:
    post:
      tags:
        - user-group
      summary: upload group image
      operationId: uploadGroupImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupImageDto'
        required: true
      responses:
        200:
          description: Successful operation.
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/group/invite:
    post:
      tags:
        - user-group
      summary: invite to group
      operationId: inviteToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content: {}
        500:
          description: Error occurred during execution of request.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/group/inviters:
    get:
      tags:
        - user-group
      summary: get list of invited groups
      operationId: getInviterGroups
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviterListDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-group/group/inviter/accept:
    post:
      tags:
        - user-group
      summary: accept invite request from group
      operationId: acceptInviteRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviterDto'
        required: true
      responses:
        200:
          description: Successful operation.
          content: {}
        500:
          description: Error occurred during execution of request.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-group/group/age-level:
    get:
      tags:
        - guest-group
      summary: get group age levels
      operationId: getAgeLevels
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllAgeLevelsDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-group/groups/{page-size}/{page-number}:
    get:
      tags:
        - guest-group
      summary: get all groups by page size and number
      operationId: getGroups
      parameters:
        - name: page-size
          in: path
          description: page size
          required: true
          schema:
            type: integer
            format: int32
        - name: page-number
          in: path
          description: page number
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-player/positions:
    get:
      tags:
        - guest-player
      summary: get player positions
      operationId: getPositions
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleValueListDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /guest-player/players/{page-size}/{page-number}:
    get:
      tags:
        - guest-player
      summary: get players by page size and number
      operationId: getProfileOfPlayers
      parameters:
        - name: page-size
          in: path
          description: page size
          required: true
          schema:
            type: integer
            format: int32
        - name: page-number
          in: path
          description: page number
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerProfileDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-player/image:
    post:
      tags:
        - user-player
      summary: upload player image
      operationId: uploadPlayerImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerImageDto'
        required: true
      responses:
        200:
          description: Successful operation.
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-player/location:
    post:
      tags:
        - user-player
      summary: update player location
      operationId: updatePlayerLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDto'
        required: true
      responses:
        200:
          description: Successful operation.
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      tags:
        - user-player
      summary: return player location
      operationId: getPlayerLocation
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-player/info:
    post:
      tags:
        - user-player
      summary: update player location
      operationId: updatePlayerInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerInfoDto'
        required: true
      responses:
        200:
          description: Successful operation.
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      tags:
        - user-player
      summary: return player location
      operationId: getPlayerInfo
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerInfoDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-player/position:
    post:
      tags:
        - user-player
      summary: update player position
      operationId: updatePlayerPosition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerPositionDto'
        required: true
      responses:
        200:
          description: Successful operation.
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      tags:
        - user-player
      summary: return player location
      operationId: getPlayerPosition
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPositionDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user-player/user-info:
    get:
      tags:
        - user-player
      summary: return user info
      operationId: getUserInfo
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDto'
        500:
          description: Error occurred during execution of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
components:
  schemas:
    TokenRequiredDto:
      type: object
      properties:
        message:
          type: string
        tokenType:
          $ref: '#/components/schemas/TokenTypeEnum'
        tokenAction:
          $ref: '#/components/schemas/TokenActionEnum'
    SignupDto:
      type: object
      properties:
        username:
          type: string
        mobile:
          type: string
        password:
          type: string
    InviterListDto:
      type: object
      properties:
        inviters:
          type: array
          items:
            $ref: '#/components/schemas/InviterDto'
    TokenActionEnum:
      type: string
      enum:
        - SIGNUP
        - FORGET_PASSWORD
    ErrorDto:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        status:
          type: string
        error:
          type: string
        message:
          type: string
        path:
          type: string
    ZoneEnum:
      type: string
      enum:
        - NONE
        - C
        - N
        - S
        - E
        - W
        - NE
        - NW
        - SE
        - SW
    PositionEnum:
      type: string
      enum:
        - NONE
        - G
        - CB
        - LB
        - RB
        - DM
        - CM
        - LM
        - RM
        - CF
    RuleEnum:
      type: string
      enum:
        - FREE
        - REGISTER_EMAIL
        - VERIFY_EMAIL
        - REGISTER_MOBILE
        - VERIFY_MOBILE
    UpdateGroupDto:
      type: object
      properties:
        currentName:
          type: string
        newName:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ageLevel:
          type: string
    #          $ref: '#/components/schemas/AgeLevelDto'
    CreateGroupDto:
      type: object
      properties:
        name:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        ageLevel:
          type: string
    #          $ref: '#/components/schemas/AgeLevelDto'
    GroupDto:
      type: object
      properties:
        name:
          type: string
        adminName:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        imageExtension:
          type: string
        ageLevel:
          type: string
    #          $ref: '#/components/schemas/AgeLevelDto'
    GroupListDto:
      type: array
      items:
        $ref: '#/components/schemas/GroupDto'
    MeDto:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        mobile:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        rule:
          $ref: '#/components/schemas/RuleEnum'
        position:
          $ref: '#/components/schemas/PositionEnum'
        imageExtension:
          type: string
    AgeLevelEnum:
      type: string
      enum:
        - FREE
        - LESS_THAN_5
        - LESS_THAN_10
        - LESS_THAN_15
        - LESS_THAN_20
        - LESS_THAN_30
        - LESS_THAN_40
        - LESS_THAN_50
        - LESS_THAN_60
        - GREATER_THAN_60
    MessageDto:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        code:
          type: integer
          format: int64
        message:
          type: string
        path:
          type: string
    TitleValueDto:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
    TitleValueListDto:
      type: array
      items:
        $ref: '#/components/schemas/TitleValueDto'
    AgeLevelDto:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
    TokenTypeEnum:
      type: string
      enum:
        - MOBILE
        - PASSWORD
        - EMAIL
    InviteDto:
      type: object
      properties:
        groupName:
          type: string
        mobiles:
          type: array
          items:
            type: string
    RoleEnum:
      type: string
      enum:
        - UNKNOWN
        - GUEST
        - USER
        - VERIFIED_MOBILE
        - VERIFIED
        - SUSPENDED
        - ADMIN
    VerifyTokenDto:
      type: object
      properties:
        code:
          type: string
        tokenType:
          $ref: '#/components/schemas/TokenTypeEnum'
        tokenAction:
          $ref: '#/components/schemas/TokenActionEnum'
    LoginDto:
      type: object
      properties:
        mobile:
          type: string
        password:
          type: string
    SampleDto:
      title: SampleDto
      type: object
      properties:
        name:
          type: string
          example: Ali
        message:
          type: string
          example: Hi
    ForgetPasswordDto:
      type: object
      properties:
        mobile:
          type: string
        newPassword:
          type: string
    InviterDto:
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        groupName:
          type: string
        isSeen:
          type: boolean
    AllAgeLevelsDto:
      type: array
      items:
        $ref: '#/components/schemas/AgeLevelDto'
    GroupImageDto:
      type: object
      properties:
        groupName:
          type: string
        image:
          type: string
    PlayerImageDto:
      type: object
      properties:
        playerUsername:
          type: string
        image:
          type: string
    LocationDto:
      type: object
      properties:
        abbr:
          type: string
        zone:
          $ref: '#/components/schemas/ZoneEnum'
    PlayerPositionDto:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PositionEnum'
    PlayerInfoDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        nationalCode:
          type: string
    UserInfoDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        nationalCode:
          type: string
        position:
          $ref: '#/components/schemas/PositionEnum'
        abbr:
          type: string
        zone:
          $ref: '#/components/schemas/ZoneEnum'
    PlayerProfileDto:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        nationalCode:
          type: string
        position:
          $ref: '#/components/schemas/PositionEnum'
        imageExtension:
          type: string
        abbreviatedCity:
          type: string
        zone:
          $ref: '#/components/schemas/ZoneEnum'